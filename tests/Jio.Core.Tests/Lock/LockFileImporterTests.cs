using System.Text.Json;
using Xunit;
using Jio.Core.Lock;

namespace Jio.Core.Tests.Lock;

public class LockFileImporterTests : IDisposable
{
    private readonly LockFileImporter _importer;
    private readonly string _testDirectory;

    public LockFileImporterTests()
    {
        _importer = new LockFileImporter();
        _testDirectory = Path.Combine(Path.GetTempPath(), $"jio-test-{Guid.NewGuid():N}");
        Directory.CreateDirectory(_testDirectory);
    }

    [Fact]
    public async Task ImportAsync_NpmLockFile_SuccessfullyImports()
    {
        // Arrange
        var npmLockContent = @"{
  ""name"": ""test-project"",
  ""version"": ""1.0.0"",
  ""lockfileVersion"": 3,
  ""packages"": {
    """": {
      ""name"": ""test-project"",
      ""version"": ""1.0.0"",
      ""dependencies"": {
        ""express"": ""^4.18.2""
      }
    },
    ""node_modules/express"": {
      ""version"": ""4.18.2"",
      ""resolved"": ""https://registry.npmjs.org/express/-/express-4.18.2.tgz"",
      ""integrity"": ""sha512-test-integrity"",
      ""dependencies"": {
        ""body-parser"": ""1.20.1""
      }
    },
    ""node_modules/body-parser"": {
      ""version"": ""1.20.1"",
      ""resolved"": ""https://registry.npmjs.org/body-parser/-/body-parser-1.20.1.tgz"",
      ""integrity"": ""sha512-test-integrity-2"",
      ""dependencies"": {}
    }
  }
}";
        var lockFilePath = Path.Combine(_testDirectory, "package-lock.json");
        await File.WriteAllTextAsync(lockFilePath, npmLockContent);

        // Act
        var result = await _importer.ImportAsync(lockFilePath);

        // Assert
        Assert.NotNull(result);
        Assert.Equal(2, result.Packages.Count);
        
        Assert.True(result.Packages.ContainsKey("express@4.18.2"));
        var expressPackage = result.Packages["express@4.18.2"];
        Assert.Equal("4.18.2", expressPackage.Version);
        Assert.Equal("https://registry.npmjs.org/express/-/express-4.18.2.tgz", expressPackage.Resolved);
        Assert.Equal("sha512-test-integrity", expressPackage.Integrity);
        Assert.NotNull(expressPackage.Dependencies);
        Assert.Single(expressPackage.Dependencies);
        Assert.Equal("1.20.1", expressPackage.Dependencies["body-parser"]);

        Assert.True(result.Packages.ContainsKey("body-parser@1.20.1"));
        var bodyParserPackage = result.Packages["body-parser@1.20.1"];
        Assert.Equal("1.20.1", bodyParserPackage.Version);
    }

    [Fact]
    public async Task ImportAsync_YarnLockFile_SuccessfullyImports()
    {
        // Arrange
        var yarnLockContent = @"# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1

express@^4.18.2:
  version ""4.18.2""
  resolved ""https://registry.yarnpkg.com/express/-/express-4.18.2.tgz#test-hash""
  integrity sha512-test-integrity
  dependencies:
    body-parser ""1.20.1""
    cookie ""0.5.0""

body-parser@1.20.1:
  version ""1.20.1""
  resolved ""https://registry.yarnpkg.com/body-parser/-/body-parser-1.20.1.tgz#test-hash-2""
  integrity sha512-test-integrity-2

cookie@0.5.0:
  version ""0.5.0""
  resolved ""https://registry.yarnpkg.com/cookie/-/cookie-0.5.0.tgz#test-hash-3""
  integrity sha512-test-integrity-3
";
        var lockFilePath = Path.Combine(_testDirectory, "yarn.lock");
        await File.WriteAllTextAsync(lockFilePath, yarnLockContent);

        // Act
        var result = await _importer.ImportAsync(lockFilePath);

        // Assert
        Assert.NotNull(result);
        Assert.Equal(3, result.Packages.Count);
        
        Assert.True(result.Packages.ContainsKey("express@4.18.2"));
        var expressPackage = result.Packages["express@4.18.2"];
        Assert.Equal("4.18.2", expressPackage.Version);
        Assert.Equal("https://registry.yarnpkg.com/express/-/express-4.18.2.tgz#test-hash", expressPackage.Resolved);
        Assert.Equal("sha512-test-integrity", expressPackage.Integrity);
        Assert.NotNull(expressPackage.Dependencies);
        Assert.Equal(2, expressPackage.Dependencies.Count);
        Assert.Equal("1.20.1", expressPackage.Dependencies["body-parser"]);
        Assert.Equal("0.5.0", expressPackage.Dependencies["cookie"]);

        Assert.True(result.Packages.ContainsKey("body-parser@1.20.1"));
        Assert.True(result.Packages.ContainsKey("cookie@0.5.0"));
    }

    [Fact]
    public async Task ImportAsync_PnpmLockFile_SuccessfullyImports()
    {
        // Arrange
        var pnpmLockContent = @"lockfileVersion: '6.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

dependencies:
  express:
    specifier: ^4.18.2
    version: 4.18.2

packages:

  /express@4.18.2:
    resolution: {integrity: sha512-test-integrity, tarball: https://registry.npmjs.org/express/-/express-4.18.2.tgz}
    engines: {node: '>= 0.10.0'}
    dependencies:
      body-parser: 1.20.1
      cookie: 0.5.0
    dev: false

  /body-parser@1.20.1:
    resolution: {integrity: sha512-test-integrity-2, tarball: https://registry.npmjs.org/body-parser/-/body-parser-1.20.1.tgz}
    engines: {node: '>= 0.10'}
    dependencies:
      bytes: 3.1.2
    dev: false

  /cookie@0.5.0:
    resolution: {integrity: sha512-test-integrity-3, tarball: https://registry.npmjs.org/cookie/-/cookie-0.5.0.tgz}
    engines: {node: '>= 0.6'}
    dev: false

  /bytes@3.1.2:
    resolution: {integrity: sha512-test-integrity-4, tarball: https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz}
    engines: {node: '>= 0.8'}
    dev: false
";
        var lockFilePath = Path.Combine(_testDirectory, "pnpm-lock.yaml");
        await File.WriteAllTextAsync(lockFilePath, pnpmLockContent);

        // Act
        var result = await _importer.ImportAsync(lockFilePath);

        // Assert
        Assert.NotNull(result);
        Assert.Equal(4, result.Packages.Count);
        
        Assert.True(result.Packages.ContainsKey("express@4.18.2"));
        var expressPackage = result.Packages["express@4.18.2"];
        Assert.Equal("4.18.2", expressPackage.Version);
        Assert.Equal("https://registry.npmjs.org/express/-/express-4.18.2.tgz", expressPackage.Resolved);
        Assert.Equal("sha512-test-integrity", expressPackage.Integrity);
        Assert.NotNull(expressPackage.Dependencies);
        Assert.Equal(2, expressPackage.Dependencies.Count);
        
        Assert.True(result.Packages.ContainsKey("body-parser@1.20.1"));
        Assert.True(result.Packages.ContainsKey("cookie@0.5.0"));
        Assert.True(result.Packages.ContainsKey("bytes@3.1.2"));
    }

    [Fact]
    public async Task ImportAsync_UnsupportedFormat_ThrowsNotSupportedException()
    {
        // Arrange
        var lockFilePath = Path.Combine(_testDirectory, "unknown.lock");
        await File.WriteAllTextAsync(lockFilePath, "unknown content");

        // Act & Assert
        await Assert.ThrowsAsync<NotSupportedException>(() => _importer.ImportAsync(lockFilePath));
    }

    [Fact]
    public async Task ImportAsync_InvalidJson_ThrowsInvalidOperationException()
    {
        // Arrange
        var lockFilePath = Path.Combine(_testDirectory, "package-lock.json");
        await File.WriteAllTextAsync(lockFilePath, "{ invalid json");

        // Act & Assert
        await Assert.ThrowsAsync<JsonException>(() => _importer.ImportAsync(lockFilePath));
    }

    [Fact]
    public async Task ImportAsync_EmptyNpmLockFile_ReturnsEmptyLockFile()
    {
        // Arrange
        var npmLockContent = @"{
  ""name"": ""test-project"",
  ""version"": ""1.0.0"",
  ""lockfileVersion"": 3,
  ""packages"": {}
}";
        var lockFilePath = Path.Combine(_testDirectory, "package-lock.json");
        await File.WriteAllTextAsync(lockFilePath, npmLockContent);

        // Act
        var result = await _importer.ImportAsync(lockFilePath);

        // Assert
        Assert.NotNull(result);
        Assert.Empty(result.Packages);
    }

    [Fact]
    public async Task ImportAsync_NpmLockFileWithDevDependencies_MarksPackagesAsDev()
    {
        // Arrange
        var npmLockContent = @"{
  ""name"": ""test-project"",
  ""version"": ""1.0.0"",
  ""lockfileVersion"": 3,
  ""packages"": {
    ""node_modules/typescript"": {
      ""version"": ""5.0.0"",
      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-5.0.0.tgz"",
      ""integrity"": ""sha512-test-integrity"",
      ""dev"": true,
      ""dependencies"": {}
    }
  }
}";
        var lockFilePath = Path.Combine(_testDirectory, "package-lock.json");
        await File.WriteAllTextAsync(lockFilePath, npmLockContent);

        // Act
        var result = await _importer.ImportAsync(lockFilePath);

        // Assert
        Assert.NotNull(result);
        Assert.Single(result.Packages);
        
        var tsPackage = result.Packages["typescript@5.0.0"];
        Assert.True(tsPackage.Dev);
    }

    [Fact]
    public async Task ImportAsync_NpmLockFileWithOptionalDependencies_MarksPackagesAsOptional()
    {
        // Arrange
        var npmLockContent = @"{
  ""name"": ""test-project"",
  ""version"": ""1.0.0"",
  ""lockfileVersion"": 3,
  ""packages"": {
    ""node_modules/fsevents"": {
      ""version"": ""2.3.2"",
      ""resolved"": ""https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz"",
      ""integrity"": ""sha512-test-integrity"",
      ""optional"": true,
      ""dependencies"": {}
    }
  }
}";
        var lockFilePath = Path.Combine(_testDirectory, "package-lock.json");
        await File.WriteAllTextAsync(lockFilePath, npmLockContent);

        // Act
        var result = await _importer.ImportAsync(lockFilePath);

        // Assert
        Assert.NotNull(result);
        Assert.Single(result.Packages);
        
        var fseventsPackage = result.Packages["fsevents@2.3.2"];
        Assert.True(fseventsPackage.Optional);
    }

    public void Dispose()
    {
        try
        {
            Directory.Delete(_testDirectory, true);
        }
        catch
        {
            // Ignore cleanup errors
        }
    }
}